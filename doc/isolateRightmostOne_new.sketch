type dom = bool;
type typ = bitvector(5);

signature =  { and(2), xor(2), shr(1), add(2), sub(2), one(0), neg(1), specification(1) };

Sketch isolateRightMostOne(na) {
       
       blocks = [
           Lx = input,
	   L1 = (and(Lx | L1, Lx | L1) | xor(Lx | L1, Lx | L1) | shr(Lx | L1, Lx | L1) | \
	         add(Lx | L1, Lx | L1) | sub(Lx | L1, Lx | L1) | one | \
		 neg(Lx | L1))^na,
	   SPEC = specification(Lx);
       ];

      
       dom_intr = Primal(dom){
       
           and = function(dom t1, dom t2) {
	       return bvand(t1, t2);
	   };

	   or = function(dom t1, dom t2) {
	       return bvor(t1, t2);
	   };

	   xor = function(dom t1, dom t2) {
	       return bvxor(t1, t2);
	   };

	   shr = function(dom t1) {
	       return ashr(t1);
	   };

	   add = function(dom t1, dom t2) {
	       return bvadd(t1, t2);
	   };

	   sub = function(dom t1, dom t2) {
	       return bvsub(t1, t2);
	   };

	   one = function() {
	       return 0b00001;  // or t == 1
	   };

	   neg = function(dom t1, dom t2) {
	       return bvneg(t2);
	   };

	   specification = function(dom t) {
	       return (0b00001 if bit(t, 0) == 1 else (
	       	         0b00010 if bit(t, 1) == 1 else (
			   0b00100 if bit(t, 2) == 1 else (
                             0b01000 if bit(t, 3) == 1 else (
                               0b10000 if bit(t, 4) == 1 else (
			 	 0b00000))))))
	   };

	   ensure = get_val(dom_intr, L1, na) == get_val(dom_intr, SPEC, 1);

       };


       typ_intr = Dual(typ){
       
           and = function(typ t1, typ t2, typ t3) {
	       return t3 == t1 or t2;
	   };

	   or = and;
	   xor = and;
	   add = and;
	   sub = and;

	   shr = function(typ t1) {
	       return t1 == t2;
	   };

	   identity = shr;
	   neg = shr;

	   one = function(typ t1) {
	       return False;
	   };
	   
	   one = shr;

	   one = function() {
	       return t1 == t2;
	   };

	   neg = function(typ t1, typ t2) {
	       return bvneg(t2);
	   };

	   specification = function(typ t1, typ t2) {
	       return True;
	   };

	   input = function(typ t1){
	       return True;
	   };

           ensure = get_val(typ_intr, L1, na) == get_val(typ_intr, SPEC, 1);

       };
}
