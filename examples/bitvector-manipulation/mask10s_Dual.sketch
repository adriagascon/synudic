(rightmostOff_sketch

  (comment "Turnoff rightmost 1 bit")
  (comment "Usage: python src/main.py rightmostOff_Dual2.sketch na=2")
  (comment "type: boolean denoting if there is a 1 in the right")

  (parameters na)

  (library
    (bvand 2)
    (bvxor 2)
    (bvor 2)
    (bvshr 1)
    (bvsub 1)
    (bvnot 1)
    (bvadd 1)
  )

  (blocks
    (Lx 1 ((input x)))
    (l1 na ((bvand (Lx -) (Lx -)) (bvxor (Lx -) (Lx -)) (bvshr (Lx -)) (bvsub (Lx -)) (bvnot (Lx -)) (bvadd (Lx -)) (bvor (Lx -) (Lx -)) ))
  )

  (dual typ
    (decls
      (define-type typ (scalar x100 x011 x101 x000 x111 c0100 c0111 unknown))
      (define bvsub::(-> typ typ bool) (lambda (x::typ z::typ) 
          (or
            (= z unknown)
            (and (= z x011) (= x x100))
            (and (= z x100) (= x x101)))))
      (define bvadd::(-> typ typ bool) (lambda (x::typ z::typ) 
          (or
            (= z unknown)
            (and (= z x101) (= x x100))
            (and (= z x100) (= x x011)))))

      (define bvand::(-> typ typ typ bool) (lambda (x::typ y::typ z::typ) 
        (or
          (= z unknown)
          (and (= z x) (= x y))
          (and (= z x000) (= x x100) (= y x011))
          (and (= z x000) (= y x100) (= x x011)))))
          ;; all other cases result in a value that already exists!!


      (define bvxor::(-> typ typ typ bool) (lambda (x::typ y::typ z::typ) 
        (or
          (= z unknown)
          (and (= z c0111) (= x x100) (= y x011))
          (and (= z c0111) (= y x100) (= x x011))
          (and (= z c0100) (= x x100) (= y x000))
          (and (= z c0100) (= y x100) (= x x000))
          (and (= z x000) (= x x100) (= y c0100))
          (and (= z x000) (= y x100) (= x c0100))
          (and (= z x011) (= x x100) (= y c0111))
          (and (= z x011) (= y x100) (= x c0111)))))

      (define bvor::(-> typ typ typ bool) (lambda (x::typ y::typ z::typ) 
        (or
          (= z unknown)
          (and (= z x) (= x y))
          (and (= z x111) (= x x100) (= y x011))
          (and (= z x111) (= y x100) (= x x011)))))

      (define bvshr::(-> typ typ bool) (lambda (x::typ z::typ) 
          (= z unknown)))

      (define bvnot::(-> typ typ bool) (lambda (x::typ z::typ) 
          (= z unknown)))
    )

    (ensure
     (and 
       (= (typ Lx 1) x100)
       (= (typ l1 na) c0111))
    )
  )
)


