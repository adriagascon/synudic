;; Usage: python src/main.py examples/bc_modes_noprimal.sketch na=2 nb=3 nlevels=4 ; ECB (not secure)
;; Usage: python src/main.py examples/bc_modes_noprimal.sketch na=2 nb=4 nlevels=4 ; OFB (needs forward rules in parametric dual intr)
;; Usage: python src/main.py examples/bc_modes_noprimal.sketch na=2 nb=4 nlevels=5 ; CBC (does not need forward rules in parametric dual intr)
;; type: <istopxor> <istoph> <istopg> <isrand> <issizem>

(bc_modes_sketch

  (parameters na nb nlevels)

  (library
    (PRF 1)
    (dup1 1)
    (dup2 1)
    (out 1)
    (nextiv 1)
    (start 1)
    (oplus 2 ac)
  )

  (blocks
    (lm 1 ((input m) ))
    (lr 1 ((input r) ))
    (l1 1 ((input dstart) ))

    (ini na ( (oplus (lr -) (lr -)) (dup1 (lr -)) (dup2 (lr -)) ) )
    (iniout 1 ( (out (ini)) ) )
    (ininextiv 1 ( (nextiv (ini)) ) )

    (startout 1 ( (start (l1)) ) )
    (enc nb (
              (oplus (startout lm -) (startout lm -) )
              (PRF (startout lm -))
              (dup1 (startout lm -))
              (dup2 (startout lm -))
            )
    )
    (encout 1 ( (out (enc)) ) )
    (encnextiv 1 ( (nextiv (enc)) ))
  )

  (dual typ
    (decls
      ;(define-type typ (bitvector 7))
      (define-type typ (bitvector 3))
      (define isrand::(-> typ bool) (lambda (x::typ) (bit x 0)))
      (define flagsout::(-> typ bool) (lambda (x::typ) (bit x 1)))
      (define flagsprf::(-> typ bool) (lambda (x::typ) (bit x 2)))
      ;(define hasm::(-> typ bool) (lambda (x::typ) (bit x 3)))
      ;(define hasstart::(-> typ bool) (lambda (x::typ) (bit x 4)))
      ;(define hasr::(-> typ bool) (lambda (x::typ) (bit x 5)))
      ;(define hasprf::(-> typ bool) (lambda (x::typ) (bit x 6)))

      (define oplus::(-> typ typ typ bool)
        (lambda (x::typ y::typ z::typ)
          (and
            ;(not
            ;  (or
            ;    (and (hasprf x) (hasprf y))
            ;    (and (hasr x) (hasr y))
            ;    (and (hasm x) (hasm y))
            ;    (and (hasstart x) (hasstart y))
            ;  )
            ;)
            ;(= (hasprf z) (or (hasprf x) (hasprf y)))
            ;(= (hasr z) (or (hasr x) (hasr y)))
            ;(= (hasm z) (or (hasm x) (hasm y)))
            ;(= (hasstart z) (or (hasstart x) (hasstart y)))
            (or (isrand x) (isrand y))
            (isrand z)
            (ite
              (and (isrand x) (isrand y))
              (and
                (= (flagsout z) (or (flagsout x) (flagsout y)))
                (= (flagsprf z) (or (flagsprf x) (flagsprf y)))
              )
              (ite
                (isrand x)
                (and
                  (= (flagsout z) (flagsout x))
                  (= (flagsprf z) (flagsprf x))
                )
                (and
                  (= (flagsout z) (flagsout y))
                  (= (flagsprf z) (flagsprf y))
                )
              )
            )
          )
        )
      )

      (define PRF::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            ;(hasprf y)
            ;(not (hasr y))
            ;(not (hasm y))
            ;(not (hasstart y))
            (isrand x)
            (isrand y)
            (flagsprf x)
            (flagsprf y)
            (flagsout y)
          )
        )
      )


      (define dup1::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            ;(= (hasprf x) (hasprf y))
            ;(= (hasr x) (hasr y))
            ;(= (hasm x) (hasm y))
            ;(= (hasstart x) (hasstart y))
            (= (isrand x) (isrand y))
            (= (flagsout y) (flagsout x))
            (= (flagsprf y) false)
          )
        )
      )

      (define dup2::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            ;(= (hasprf x) (hasprf y))
            ;(= (hasr x) (hasr y))
            ;(= (hasm x) (hasm y))
            ;(= (hasstart x) (hasstart y))
            (= (isrand x) (isrand y))
            (= (flagsout y) false)
            (= (flagsprf y) (flagsprf x))
          )
        )
      )

      (define nextiv::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            (flagsprf x)
              (not (flagsout x))
              (= x y)
          )
        )
      )

      (define out::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            (flagsout x)
            (not (flagsprf x))
            (= x y)
          )
        )
      )

      (define start::(-> typ typ bool)
        (lambda (x::typ y::typ)
          (and
            ;(hasstart y)
            ;(not (hasr y))
            ;(not (hasm y))
            ;(not (hasprf y))
            true
          )
        )
      )
    )



    (ensure
      (and
        ;(= (typ lm 1) (bool-to-bv false false false true false false false))
        (= (typ lm 1) (bool-to-bv false false false))
        ;(= (typ lr 1) (bool-to-bv false true false false true true true))
        (= (typ lr 1) (bool-to-bv true true true))
        ;(= (typ l1 1) (bool-to-bv false false false false false false false))
        (=> (flagsprf (typ startout 1)) (flagsprf (typ encnextiv 1)) )
        (=> (flagsout (typ startout 1)) (flagsout (typ encnextiv 1)) )
        (=> (flagsprf (typ startout 1)) (flagsprf (typ ininextiv 1)) )
        (=> (flagsout (typ startout 1)) (flagsout (typ ininextiv 1)) )


        ; A line output can be used twice only if it goes into a dup1 or dup2 function
        (foreach ((l1 ini enc))
          (foreach ((l2 ini enc))
            (=>
              (and
                (or (= (arg l1 0) (arg l2 0))
                    (= (arg l1 1) (arg l2 1))
                    (= (arg l1 0) (arg l2 1)))
                (not (or (= (func l1) dup1) (= (func l1) dup2)))
              )
              (= l1 l2)
            )
          )
        )
        ; For each dup1 there is a dup2 with the same input
        (foreach ((l1 ini enc))
          (=>
            (= (func l1) dup1)
            (forsome ((l2 ini enc))
               (and
                 (= (func l2) dup2)
                 (= (arg l1 0) (arg l2 0))
               )
            )
          )
        )
        ; For each dup2 there is a dup1 with the same input
        (foreach ((l1 ini enc))
          (=>
            (= (func l1) dup2)
            (forsome ((l2 ini enc))
               (and
                 (= (func l2) dup1)
                 (= (arg l1 0) (arg l2 0))
               )
            )
          )
        )
        ; A line output cannot be used thrice
        (foreach ((l1 inputs ini enc))
          (foreach ((l2 ini enc))
            (foreach ((l3 ini enc))
              (and
                (=>
                  (or
                    (and (= (arg l1 0) (arg l2 0)) (= (arg l2 0) (arg l3 0)))
                    (and (= (arg l1 1) (arg l2 1)) (= (arg l2 1) (arg l3 1)))
                    (and (= (arg l1 0) (arg l2 0)) (= (arg l2 0) (arg l3 1)))
                    (and (= (arg l1 1) (arg l2 1)) (= (arg l2 1) (arg l3 0))))
                  (or (= l1 l2) (= l2 l3) (= l1 l3))
                )
              )
            )
          )
        )
        ;; At most one line has a PRF function
        ;(foreach ((l1 ini enc))
        ;  (foreach ((l2 ini enc))
        ;    (=> (and (= (func l1) PRF) (= (func l2) PRF)) (= l1 l2) )
        ;  )
        ;)
        ;; Every line in enc is used
        (foreach ((l1 enc))
          (forsome ((l2 enc encout encnextiv))
            (ite (= (func l2) oplus) (or (= (arg l2 0) l1) (= (arg l2 1) l1)) (= (arg l2 0) l1))
          )
        )
      )
    )
  )

  (dual fam
    (decls
      (define-type fam (bitvector 20)) ;; parameterized type

      (define oplus::(-> fam fam fam bool)
        (lambda (x::fam y::fam z::fam)
          (and
            (= z (bv-or x y))
            ; inputs of oplus must be in disjoint families
            (= (bv-and x y) (mk-bv 20 0))
          )
        )
      )

      (define PRF::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (and
            (bv-gt y x)
            ; The following enforces that y has exactly one 1
            (= (bv-and (bv-sub y (mk-bv 20 1)) (bv-add (bv-sub y (mk-bv 20 1)) (mk-bv 20 1))) (mk-bv 20 0))
            ; This is to avoid chains of PRFs (optional)
            (or
              (not (= (bv-and (bv-sub x (mk-bv 20 1)) (bv-add (bv-sub x (mk-bv 20 1)) (mk-bv 20 1))) (mk-bv 20 0)))
              (= x (mk-bv 20 1))
              (= x (mk-bv 20 2))
            )
          )
        )
      )

    (define dup1::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (= x y)
        )
      )

      (define dup2::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (= x y)
        )
      )

      (define nextiv::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (= x y)
        )
      )

      (define out::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (= x y)
        )
      )

      (define start::(-> fam fam bool)
        (lambda (x::fam y::fam)
          (= x y)
        )
      )
    )
    (ensure
      (and
        (= (fam lr 1) (mk-bv 20 1))
        (= (fam l1 1) (mk-bv 20 2))
        (= (fam lm 1) (mk-bv 20 4))
        ; Every line output is used
        (foreach ((x enc))
          (foreach ((y enc))
            (=> (and (not (= x y)) (= (func x) PRF) (= (func y) PRF)) (not (= (fam x) (fam y))))
          )
        )
      )
    )
  )

  (dual decr PARAMETRIC GLOBAL
    (decls
      (define-type decr bool) ;; parameterized type
      (define decryptable::(-> decr bool) (lambda (x::decr) x))
      (define undecryptable::(-> decr bool) (lambda (x::decr) (not x)))
      ;; this-level and next-level (-> lineType decr) will return the
      ;; appropriate parametric variable inside a constraint declaration
      (constraint (nlevels)
        ;; x iterated over each line number from blocks enc, encout, and the inputs
        (foreach ((x enc encout startout inputs encnextiv))
          (=
            (next-level x)
            (or
              (this-level x)
              ; forward rules: (e.g. \forall x:  x := PRF(y)\wedge decryptable(y) \rightarrow decryptable(x))
              (and
                (or
                  (= (func x) PRF)
                  (= (func x) dup1)
                  (= (func x) dup2)
                  (= (func x) out)
                )
                (this-level (arg x 0))
              )
              ; backward rules:
              ;    (e.g.
              ;        (\forall x,y:
              ;           ((y := x \oplus z)\wedge decryptable(z)\wedge decryptable(y)) \rightarrow decryptable(x))
              ;    )
              (forsome ((y startout enc encout))
                (or
                  (and (= (func y) dup1) (= (arg y 0) x) (this-level y) )
                  (and (= (func y) dup2) (= (arg y 0) x) (this-level y) )
                  (and (= (func y) out) (= (arg y 0) x) (this-level y) )
                  (and (= (func y) PRF) (= (arg y 0) x) (this-level y) )
                  (and (= (func y) oplus) (= (arg y 0) x) (this-level y) (this-level (arg y 1)))
                  (and (= (func y) oplus) (= (arg y 1) x) (this-level y) (this-level (arg y 0)))
                )
              )
            )
          )
        )
      )
    )
    (ensure
      (and
        (foreach ((x startout enc encout inputs))
          (=
            (decryptable (level x 1))
            (or (= x (line startout 1)) (= x (line encout 1)))
          )
        )
        (decryptable (level (line lm 1) nlevels))
        (decryptable (level (line encnextiv 1) nlevels))
      )
    )
  )
)
